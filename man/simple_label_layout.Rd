% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simple_label_layout.R
\name{simple_label_layout}
\alias{simple_label_layout}
\title{Make simple label layout for barcode printing}
\usage{
simple_label_layout(
  barcode_text = NULL,
  print_text = barcode_text,
  barcode_type = "linear",
  label_width = 1.75,
  label_height = 0.5,
  label_margin = 0.05,
  font_size = 12,
  fontfamily = "mono",
  line_number = NULL,
  barcode_on_top = FALSE,
  barcode_height = ifelse(barcode_type == "linear", 0.5, 1),
  ecl = 1,
  useMarkdown = FALSE,
  barcode_scale = 1,
  font_col = "black"
)
}
\arguments{
\item{barcode_text}{a vector of strings for generating barcodes}

\item{print_text}{a vector of strings for printing on the label (could use "\\n" for line break)}

\item{barcode_type}{"null" for no barcode needed, "linear" for code128, "qr" for QR code, and "dm" for datamatrix (ecc200)}

\item{label_width}{label width in inch}

\item{label_height}{label height in inch}

\item{label_margin}{0-1, margin proportion of the short side (label height)}

\item{font_size}{font size to use for text, will be adjusted automatically to fit text area}

\item{fontfamily}{font family to use: mono, sans, or serif. You can also use specific font available in your OS (such as Times).
It is used to determine string width.}

\item{line_number}{how many lines are in the print_text; auto determined based on "\\n".}

\item{barcode_on_top}{whether to put the linear barcode on the top, text at the bottom.}

\item{barcode_height}{barcode height proportion of the label height.}

\item{ecl}{error correction value for matrix labels only (1 = Low (7\%), 2 = Medium (15\%), 3 = Quantile (25\%), 4 = High (30\%)}

\item{useMarkdown}{whether treat ** quotes as markdown (only support fontfaces)}

\item{barcode_scale}{0-1, scale barcode plot inside the barcode drawing area}

\item{font_col}{font color, default "black"}
}
\value{
a list of label layout (vp_list) and content (content_list) for input of function "custom_label" parameters 'vp_list' and 'content_list'
}
\description{
The layout on each label is simple: 1 text area + 1 barcode area (up and down) for linear barcodes, 
and left QR code + right text for matrix barcodes.
}
\examples{

dd <- data.frame(plot = 101:110, accession = LETTERS[1:10])

# for 1D (linear code128) labels
# 1. create simple element layout on each label
linear_label_list <- simple_label_layout(
  barcode_text=dd$plot,
  print_text = paste0("**Plot** ",dd$plot, "\n", "**Acc** ", dd$accession),
  barcode_on_top = T, barcode_type="linear", font_size =12,
  barcode_height = 0.4, fontfamily = "sans", useMarkdown = T)
# 2. create pdf file
make_custom_label(
    label_number = nrow(dd), # how many labels to print
    name = "linear_barcode_test", # pdf output file name
    label_type = "avery5967",
    fontfamily = "mono", # "mono", "sans", "serif"
    showborder = T, # whether to show border of labels
    vp_list = linear_label_list$vp_list,
    content_list = linear_label_list$content_list,
    text_align = "center", # left or center
    useMarkdown = T
)
# for QR codes
# 1. create simple element layout on each label
qr_label_list <- simple_label_layout(
  barcode_text=dd$plot,
  print_text = paste0("**Plot** ",dd$plot, "\n", "**Acc** ", dd$accession),
  barcode_on_top = T, barcode_type="qr", font_size=12,
  barcode_height = 1, fontfamily = "sans", useMarkdown=T)
# 2. create pdf file
make_custom_label(
  label_number = nrow(dd), # how many labels to print
  name = "QR_barcode_test", # pdf output file name
  label_type = "avery5967",
  fontfamily = "mono", # "mono", "sans", "serif"
  showborder = T, # whether to show border of labels
  vp_list = qr_label_list$vp_list,
  content_list = qr_label_list$content_list,
  text_align = "left", # left or center
  useMarkdown = T
)

}
